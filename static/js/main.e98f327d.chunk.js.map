{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rollNumber","mode","delay","result","attendanceStatus","handleScan","bind","assertThisInitialized","handleError","renderView","changeRollNumber","addRollNumber","data","_this2","setState","axios","method","url","concat","then","res1","alert","defineProperty","split","response","status","console","log","catch","err","error","event","target","value","react_default","a","createElement","className","type","placeholder","onChange","onClick","lib_default","onError","onScan","style","width","margin","border","src","logo","alt","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e98f327d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport QrReader from 'react-qr-reader'\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            rollNumber: '',\n            mode: 'details',\n            delay: 300,\n            result: 'No result',\n            attendanceStatus: ''\n        }\n        this.handleScan = this.handleScan.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.renderView = this.renderView.bind(this);\n        this.changeRollNumber = this.changeRollNumber.bind(this);\n        this.addRollNumber = this.addRollNumber.bind(this);\n    }\n\n    handleScan(data) {\n\n        if (data) {\n            this.setState({\n               attendanceStatus: 'pending'\n            });\n            axios({\n                method: 'get',\n                url: `https://attendance-94425.firebaseio.com/attendance/database/students/${this.state.rollNumber}.json`\n            })\n                .then((res1) => {\n                    if(res1.data === null){\n\n                        alert(\"The roll number is not in the database.\");\n                        this.setState({\n                            attendanceStatus: 'Update Failed - Roll number does not exist in the database.'\n                         });\n                         return;\n                    }\n                    else{\n                        axios({\n                            method: 'patch',\n                            url: `https://attendance-94425.firebaseio.com/attendance/database/students/${this.state.rollNumber}/timestamps.json`,\n                            data: {\n                                        [data.split('_')[0]]: data.split('_')[1]\n                            },\n                        })\n                            .then((response) => {\n                                if (response.status === 200) {\n                                    console.log(\"Update Success\");\n                                    this.setState({\n                                        attendanceStatus: 'successful'\n                                    });\n                                }\n                            })\n                            .catch((response) => {\n                                alert(response);\n                            });\n                    }\n                })\n\n\n            this.setState({\n                result: data,\n                mode: 'success',\n            })\n        }\n    }\n\n    handleError(err) {\n        console.error(err)\n    }\n\n    changeRollNumber(event) {\n        this.setState({\n            rollNumber: event.target.value\n        })\n    }\n\n    addRollNumber() {\n        this.setState({\n            mode: 'scan'\n        })\n    }\n\n    renderView() {\n        switch (this.state.mode) {\n            case 'details':\n                return <div className=\"wrap\">\n                    <input type=\"text\" placeholder='Enter Roll Number' className='roll'\n                           onChange={this.changeRollNumber}/>\n                    <div onClick={this.addRollNumber} className=\"rollSubmit\">Submit</div>\n                </div>;\n\n            case 'scan':\n                return <div className=\"wrap\">\n                    <div>Attendace for {this.state.rollNumber}</div>\n                    <QrReader\n                        delay={this.state.delay}\n                        onError={this.handleError}\n                        onScan={this.handleScan}\n                        style={{width: '63%', margin: '2rem auto', border: '3px solid #232322'}}\n                    />\n                </div>;\n\n            case 'success':\n                return <div className=\"wrap\">\n                    <div className='data'>QR code data: <b>{ this.state.result }</b></div>\n                    <div className='status'>Attendance status: <b>{ this.state.attendanceStatus}</b> </div>\n\n                </div>\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">Welcome to Automated Attendance System</h1>\n                </header>\n                {\n                    this.renderView()\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}